// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/notes2022server.proto
// </auto-generated>
// Original file comments:
// --------------------------------------------------------------------------
// *
// * Copyright © 2022, Dale Sinder
// *
// * Name: notes2022server.proto
// *
// * Description:
// *      defines gRPC protocol for app
// *
// * This program is free software: you can redistribute it and/or modify
// * it under the terms of the GNU General Public License version 3 as
// * published by the Free Software Foundation.   
// *
// * This program is distributed in the hope that it will be useful,
// * but WITHOUT ANY WARRANTY; without even the implied warranty of
// * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// * GNU General Public License version 3 for more details.
// *
// *  You should have received a copy of the GNU General Public License
// *  version 3 along with this program in file "license-gpl-3.0.txt".
// *  If not, see<http://www.gnu.org/licenses/gpl-3.0.txt>.
// *
// *--------------------------------------------------------------------------
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Notes2022.Proto {
  /// <summary>
  /// service defintion
  /// </summary>
  public static partial class Notes2022Server
  {
    static readonly string __ServiceName = "notes2022server.Notes2022Server";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.RegisterRequest> __Marshaller_notes2022server_RegisterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.RegisterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.AuthReply> __Marshaller_notes2022server_AuthReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.AuthReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.LoginRequest> __Marshaller_notes2022server_LoginRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.LoginRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.LoginReply> __Marshaller_notes2022server_LoginReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.LoginReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.NoRequest> __Marshaller_notes2022server_NoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.NoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.ConfirmEmailRequest> __Marshaller_notes2022server_ConfirmEmailRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.ConfirmEmailRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GAppUser> __Marshaller_notes2022server_GAppUser = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GAppUser.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GAppUserList> __Marshaller_notes2022server_GAppUserList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GAppUserList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.AppUserRequest> __Marshaller_notes2022server_AppUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.AppUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.EditUserViewModel> __Marshaller_notes2022server_EditUserViewModel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.EditUserViewModel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.NoteId> __Marshaller_notes2022server_NoteId = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.NoteId.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GNoteHeader> __Marshaller_notes2022server_GNoteHeader = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GNoteHeader.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.DisplayModelRequest> __Marshaller_notes2022server_DisplayModelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.DisplayModelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.DisplayModel> __Marshaller_notes2022server_DisplayModel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.DisplayModel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.AccessAndUserListRequest> __Marshaller_notes2022server_AccessAndUserListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.AccessAndUserListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.AccessAndUserList> __Marshaller_notes2022server_AccessAndUserList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.AccessAndUserList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GNoteAccessList> __Marshaller_notes2022server_GNoteAccessList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GNoteAccessList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GNotefile> __Marshaller_notes2022server_GNotefile = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GNotefile.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.ImportRequest> __Marshaller_notes2022server_ImportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.ImportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GNoteAccess> __Marshaller_notes2022server_GNoteAccess = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GNoteAccess.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GetVersionsRequest> __Marshaller_notes2022server_GetVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GetVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GNoteHeaderList> __Marshaller_notes2022server_GNoteHeaderList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GNoteHeaderList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GSequencerList> __Marshaller_notes2022server_GSequencerList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GSequencerList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.SCheckModel> __Marshaller_notes2022server_SCheckModel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.SCheckModel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GSequencer> __Marshaller_notes2022server_GSequencer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GSequencer.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.NoteIndexRequest> __Marshaller_notes2022server_NoteIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.NoteIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.TextViewModel> __Marshaller_notes2022server_TextViewModel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.TextViewModel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GEmail> __Marshaller_notes2022server_GEmail = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GEmail.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GNoteContent> __Marshaller_notes2022server_GNoteContent = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GNoteContent.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.ForwardViewModel> __Marshaller_notes2022server_ForwardViewModel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.ForwardViewModel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.GNotefileList> __Marshaller_notes2022server_GNotefileList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.GNotefileList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.CopyModel> __Marshaller_notes2022server_CopyModel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.CopyModel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.ExportRequest> __Marshaller_notes2022server_ExportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.ExportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.JsonExport> __Marshaller_notes2022server_JsonExport = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.JsonExport.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.NoteHeadersRequest> __Marshaller_notes2022server_NoteHeadersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.NoteHeadersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.AString> __Marshaller_notes2022server_AString = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.AString.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.NoteCount> __Marshaller_notes2022server_NoteCount = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.NoteCount.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.HomePageModel> __Marshaller_notes2022server_HomePageModel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.HomePageModel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.NoteDisplayIndexModel> __Marshaller_notes2022server_NoteDisplayIndexModel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.NoteDisplayIndexModel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Notes2022.Proto.AboutModel> __Marshaller_notes2022server_AboutModel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Notes2022.Proto.AboutModel.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.RegisterRequest, global::Notes2022.Proto.AuthReply> __Method_Register = new grpc::Method<global::Notes2022.Proto.RegisterRequest, global::Notes2022.Proto.AuthReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_notes2022server_RegisterRequest,
        __Marshaller_notes2022server_AuthReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.LoginRequest, global::Notes2022.Proto.LoginReply> __Method_Login = new grpc::Method<global::Notes2022.Proto.LoginRequest, global::Notes2022.Proto.LoginReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_notes2022server_LoginRequest,
        __Marshaller_notes2022server_LoginReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.AuthReply> __Method_Logout = new grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.AuthReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Logout",
        __Marshaller_notes2022server_NoRequest,
        __Marshaller_notes2022server_AuthReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.ConfirmEmailRequest, global::Notes2022.Proto.AuthReply> __Method_ConfirmEmail = new grpc::Method<global::Notes2022.Proto.ConfirmEmailRequest, global::Notes2022.Proto.AuthReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfirmEmail",
        __Marshaller_notes2022server_ConfirmEmailRequest,
        __Marshaller_notes2022server_AuthReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GAppUser> __Method_GetUserData = new grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GAppUser>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserData",
        __Marshaller_notes2022server_NoRequest,
        __Marshaller_notes2022server_GAppUser);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GAppUserList> __Method_GetUserList = new grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GAppUserList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserList",
        __Marshaller_notes2022server_NoRequest,
        __Marshaller_notes2022server_GAppUserList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.AppUserRequest, global::Notes2022.Proto.EditUserViewModel> __Method_GetUserRoles = new grpc::Method<global::Notes2022.Proto.AppUserRequest, global::Notes2022.Proto.EditUserViewModel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserRoles",
        __Marshaller_notes2022server_AppUserRequest,
        __Marshaller_notes2022server_EditUserViewModel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoteId, global::Notes2022.Proto.GNoteHeader> __Method_GetHeaderForNoteId = new grpc::Method<global::Notes2022.Proto.NoteId, global::Notes2022.Proto.GNoteHeader>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHeaderForNoteId",
        __Marshaller_notes2022server_NoteId,
        __Marshaller_notes2022server_GNoteHeader);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.DisplayModelRequest, global::Notes2022.Proto.DisplayModel> __Method_GetNoteContent = new grpc::Method<global::Notes2022.Proto.DisplayModelRequest, global::Notes2022.Proto.DisplayModel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNoteContent",
        __Marshaller_notes2022server_DisplayModelRequest,
        __Marshaller_notes2022server_DisplayModel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.AccessAndUserListRequest, global::Notes2022.Proto.AccessAndUserList> __Method_GetAccessAndUserList = new grpc::Method<global::Notes2022.Proto.AccessAndUserListRequest, global::Notes2022.Proto.AccessAndUserList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccessAndUserList",
        __Marshaller_notes2022server_AccessAndUserListRequest,
        __Marshaller_notes2022server_AccessAndUserList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.AccessAndUserListRequest, global::Notes2022.Proto.GNoteAccessList> __Method_GetAccessList = new grpc::Method<global::Notes2022.Proto.AccessAndUserListRequest, global::Notes2022.Proto.GNoteAccessList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccessList",
        __Marshaller_notes2022server_AccessAndUserListRequest,
        __Marshaller_notes2022server_GNoteAccessList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.EditUserViewModel, global::Notes2022.Proto.NoRequest> __Method_UpdateUserRoles = new grpc::Method<global::Notes2022.Proto.EditUserViewModel, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUserRoles",
        __Marshaller_notes2022server_EditUserViewModel,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GNotefile, global::Notes2022.Proto.GNotefile> __Method_CreateNoteFile = new grpc::Method<global::Notes2022.Proto.GNotefile, global::Notes2022.Proto.GNotefile>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNoteFile",
        __Marshaller_notes2022server_GNotefile,
        __Marshaller_notes2022server_GNotefile);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GNotefile, global::Notes2022.Proto.GNotefile> __Method_UpdateNoteFile = new grpc::Method<global::Notes2022.Proto.GNotefile, global::Notes2022.Proto.GNotefile>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNoteFile",
        __Marshaller_notes2022server_GNotefile,
        __Marshaller_notes2022server_GNotefile);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GNotefile, global::Notes2022.Proto.NoRequest> __Method_DeleteNoteFile = new grpc::Method<global::Notes2022.Proto.GNotefile, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNoteFile",
        __Marshaller_notes2022server_GNotefile,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.ImportRequest, global::Notes2022.Proto.NoRequest> __Method_Import = new grpc::Method<global::Notes2022.Proto.ImportRequest, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Import",
        __Marshaller_notes2022server_ImportRequest,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GNoteAccess, global::Notes2022.Proto.GNoteAccess> __Method_UpdateAccessItem = new grpc::Method<global::Notes2022.Proto.GNoteAccess, global::Notes2022.Proto.GNoteAccess>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccessItem",
        __Marshaller_notes2022server_GNoteAccess,
        __Marshaller_notes2022server_GNoteAccess);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GNoteAccess, global::Notes2022.Proto.NoRequest> __Method_DeleteAccessItem = new grpc::Method<global::Notes2022.Proto.GNoteAccess, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccessItem",
        __Marshaller_notes2022server_GNoteAccess,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GNoteAccess, global::Notes2022.Proto.GNoteAccess> __Method_AddAccessItem = new grpc::Method<global::Notes2022.Proto.GNoteAccess, global::Notes2022.Proto.GNoteAccess>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAccessItem",
        __Marshaller_notes2022server_GNoteAccess,
        __Marshaller_notes2022server_GNoteAccess);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GAppUser, global::Notes2022.Proto.GAppUser> __Method_UpdateUserData = new grpc::Method<global::Notes2022.Proto.GAppUser, global::Notes2022.Proto.GAppUser>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUserData",
        __Marshaller_notes2022server_GAppUser,
        __Marshaller_notes2022server_GAppUser);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GetVersionsRequest, global::Notes2022.Proto.GNoteHeaderList> __Method_GetVersions = new grpc::Method<global::Notes2022.Proto.GetVersionsRequest, global::Notes2022.Proto.GNoteHeaderList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVersions",
        __Marshaller_notes2022server_GetVersionsRequest,
        __Marshaller_notes2022server_GNoteHeaderList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GSequencerList> __Method_GetSequencer = new grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GSequencerList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSequencer",
        __Marshaller_notes2022server_NoRequest,
        __Marshaller_notes2022server_GSequencerList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.SCheckModel, global::Notes2022.Proto.NoRequest> __Method_CreateSequencer = new grpc::Method<global::Notes2022.Proto.SCheckModel, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSequencer",
        __Marshaller_notes2022server_SCheckModel,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.SCheckModel, global::Notes2022.Proto.NoRequest> __Method_DeleteSequencer = new grpc::Method<global::Notes2022.Proto.SCheckModel, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSequencer",
        __Marshaller_notes2022server_SCheckModel,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GSequencer, global::Notes2022.Proto.NoRequest> __Method_UpdateSequencer = new grpc::Method<global::Notes2022.Proto.GSequencer, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSequencer",
        __Marshaller_notes2022server_GSequencer,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GSequencer, global::Notes2022.Proto.NoRequest> __Method_UpdateSequencerOrdinal = new grpc::Method<global::Notes2022.Proto.GSequencer, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSequencerOrdinal",
        __Marshaller_notes2022server_GSequencer,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoteIndexRequest, global::Notes2022.Proto.GNotefile> __Method_GetNoteFile = new grpc::Method<global::Notes2022.Proto.NoteIndexRequest, global::Notes2022.Proto.GNotefile>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNoteFile",
        __Marshaller_notes2022server_NoteIndexRequest,
        __Marshaller_notes2022server_GNotefile);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.TextViewModel, global::Notes2022.Proto.GNoteHeader> __Method_CreateNewNote = new grpc::Method<global::Notes2022.Proto.TextViewModel, global::Notes2022.Proto.GNoteHeader>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNewNote",
        __Marshaller_notes2022server_TextViewModel,
        __Marshaller_notes2022server_GNoteHeader);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.TextViewModel, global::Notes2022.Proto.GNoteHeader> __Method_UpdateNote = new grpc::Method<global::Notes2022.Proto.TextViewModel, global::Notes2022.Proto.GNoteHeader>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNote",
        __Marshaller_notes2022server_TextViewModel,
        __Marshaller_notes2022server_GNoteHeader);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.GEmail, global::Notes2022.Proto.NoRequest> __Method_SendEmailAuth = new grpc::Method<global::Notes2022.Proto.GEmail, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendEmailAuth",
        __Marshaller_notes2022server_GEmail,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoteId, global::Notes2022.Proto.GNoteContent> __Method_GetExport2 = new grpc::Method<global::Notes2022.Proto.NoteId, global::Notes2022.Proto.GNoteContent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExport2",
        __Marshaller_notes2022server_NoteId,
        __Marshaller_notes2022server_GNoteContent);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.ForwardViewModel, global::Notes2022.Proto.NoRequest> __Method_DoForward = new grpc::Method<global::Notes2022.Proto.ForwardViewModel, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DoForward",
        __Marshaller_notes2022server_ForwardViewModel,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GNotefileList> __Method_GetNoteFilesOrderedByName = new grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GNotefileList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNoteFilesOrderedByName",
        __Marshaller_notes2022server_NoRequest,
        __Marshaller_notes2022server_GNotefileList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.CopyModel, global::Notes2022.Proto.NoRequest> __Method_CopyNote = new grpc::Method<global::Notes2022.Proto.CopyModel, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyNote",
        __Marshaller_notes2022server_CopyModel,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoteId, global::Notes2022.Proto.NoRequest> __Method_DeleteNote = new grpc::Method<global::Notes2022.Proto.NoteId, global::Notes2022.Proto.NoRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNote",
        __Marshaller_notes2022server_NoteId,
        __Marshaller_notes2022server_NoRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.ExportRequest, global::Notes2022.Proto.JsonExport> __Method_GetExportJson = new grpc::Method<global::Notes2022.Proto.ExportRequest, global::Notes2022.Proto.JsonExport>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExportJson",
        __Marshaller_notes2022server_ExportRequest,
        __Marshaller_notes2022server_JsonExport);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoteHeadersRequest, global::Notes2022.Proto.GNoteHeaderList> __Method_GetNoteHeaders = new grpc::Method<global::Notes2022.Proto.NoteHeadersRequest, global::Notes2022.Proto.GNoteHeaderList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNoteHeaders",
        __Marshaller_notes2022server_NoteHeadersRequest,
        __Marshaller_notes2022server_GNoteHeaderList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.AString> __Method_GetHomePageMessage = new grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.AString>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHomePageMessage",
        __Marshaller_notes2022server_NoRequest,
        __Marshaller_notes2022server_AString);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoteIndexRequest, global::Notes2022.Proto.NoteCount> __Method_GetNoteCount = new grpc::Method<global::Notes2022.Proto.NoteIndexRequest, global::Notes2022.Proto.NoteCount>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNoteCount",
        __Marshaller_notes2022server_NoteIndexRequest,
        __Marshaller_notes2022server_NoteCount);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.HomePageModel> __Method_GetHomePageModel = new grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.HomePageModel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHomePageModel",
        __Marshaller_notes2022server_NoRequest,
        __Marshaller_notes2022server_HomePageModel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.HomePageModel> __Method_GetAdminPageModel = new grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.HomePageModel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAdminPageModel",
        __Marshaller_notes2022server_NoRequest,
        __Marshaller_notes2022server_HomePageModel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoteIndexRequest, global::Notes2022.Proto.NoteDisplayIndexModel> __Method_GetNoteFileIndexData = new grpc::Method<global::Notes2022.Proto.NoteIndexRequest, global::Notes2022.Proto.NoteDisplayIndexModel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNoteFileIndexData",
        __Marshaller_notes2022server_NoteIndexRequest,
        __Marshaller_notes2022server_NoteDisplayIndexModel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.AboutModel> __Method_GetAbout = new grpc::Method<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.AboutModel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAbout",
        __Marshaller_notes2022server_NoRequest,
        __Marshaller_notes2022server_AboutModel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Notes2022.Proto.AString, global::Notes2022.Proto.AString> __Method_GetTextFile = new grpc::Method<global::Notes2022.Proto.AString, global::Notes2022.Proto.AString>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTextFile",
        __Marshaller_notes2022server_AString,
        __Marshaller_notes2022server_AString);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Notes2022.Proto.Notes2022ServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Notes2022Server</summary>
    [grpc::BindServiceMethod(typeof(Notes2022Server), "BindService")]
    public abstract partial class Notes2022ServerBase
    {
      /// <summary>
      /// register a user - create login
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.AuthReply> Register(global::Notes2022.Proto.RegisterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// log a user in
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.LoginReply> Login(global::Notes2022.Proto.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// log current user out
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.AuthReply> Logout(global::Notes2022.Proto.NoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// user confirms email - login enabled now
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.AuthReply> ConfirmEmail(global::Notes2022.Proto.ConfirmEmailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// gets data for the current user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GAppUser> GetUserData(global::Notes2022.Proto.NoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get list of alll app users/logins
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GAppUserList> GetUserList(global::Notes2022.Proto.NoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// used for editing roles users are in
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.EditUserViewModel> GetUserRoles(global::Notes2022.Proto.AppUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// gets a note header given its id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNoteHeader> GetHeaderForNoteId(global::Notes2022.Proto.NoteId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// gets the content of a note
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.DisplayModel> GetNoteContent(global::Notes2022.Proto.DisplayModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// gets access data and user list
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.AccessAndUserList> GetAccessAndUserList(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// gets the access list for a file
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNoteAccessList> GetAccessList(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// updates roles for a user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> UpdateUserRoles(global::Notes2022.Proto.EditUserViewModel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// create a note file
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNotefile> CreateNoteFile(global::Notes2022.Proto.GNotefile request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// updates note file data
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNotefile> UpdateNoteFile(global::Notes2022.Proto.GNotefile request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// deletes a note file
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> DeleteNoteFile(global::Notes2022.Proto.GNotefile request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// runs an import
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> Import(global::Notes2022.Proto.ImportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get a single access item
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNoteAccess> UpdateAccessItem(global::Notes2022.Proto.GNoteAccess request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// deletes an access item
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> DeleteAccessItem(global::Notes2022.Proto.GNoteAccess request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// adds an access item
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNoteAccess> AddAccessItem(global::Notes2022.Proto.GNoteAccess request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// updates user data
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GAppUser> UpdateUserData(global::Notes2022.Proto.GAppUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// gets the non-zero version headers
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNoteHeaderList> GetVersions(global::Notes2022.Proto.GetVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// gets the sequencer list for a user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GSequencerList> GetSequencer(global::Notes2022.Proto.NoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// creates a sequencer item
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> CreateSequencer(global::Notes2022.Proto.SCheckModel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// deletes a sequencer item
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> DeleteSequencer(global::Notes2022.Proto.SCheckModel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// updates a sequencer item - while sequencing
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> UpdateSequencer(global::Notes2022.Proto.GSequencer request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// updates a sequencer item ordinal
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> UpdateSequencerOrdinal(global::Notes2022.Proto.GSequencer request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get the notefile for the note index
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNotefile> GetNoteFile(global::Notes2022.Proto.NoteIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get a note header
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNoteHeader> CreateNewNote(global::Notes2022.Proto.TextViewModel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// updates a note header
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNoteHeader> UpdateNote(global::Notes2022.Proto.TextViewModel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// authenticated
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> SendEmailAuth(global::Notes2022.Proto.GEmail request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// gets note content during an export
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNoteContent> GetExport2(global::Notes2022.Proto.NoteId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// forwards note(s) via email
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> DoForward(global::Notes2022.Proto.ForwardViewModel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get list of the note files ordered by name
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNotefileList> GetNoteFilesOrderedByName(global::Notes2022.Proto.NoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// copies note(s) to another file
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> CopyNote(global::Notes2022.Proto.CopyModel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// deletes a note
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoRequest> DeleteNote(global::Notes2022.Proto.NoteId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// returns data for a json export see GetNoteHeaders for a more flexible way to get filtered data
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.JsonExport> GetExportJson(global::Notes2022.Proto.ExportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// request all or some slice of a note file - headers w or wo content and tags
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.GNoteHeaderList> GetNoteHeaders(global::Notes2022.Proto.NoteHeadersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the current homepage message if any
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.AString> GetHomePageMessage(global::Notes2022.Proto.NoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the number of base notes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoteCount> GetNoteCount(global::Notes2022.Proto.NoteIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get data needed for home page
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.HomePageModel> GetHomePageModel(global::Notes2022.Proto.NoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// a bit more data than home page
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.HomePageModel> GetAdminPageModel(global::Notes2022.Proto.NoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get data for the index of a notefile
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.NoteDisplayIndexModel> GetNoteFileIndexData(global::Notes2022.Proto.NoteIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// gets data for the about page
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.AboutModel> GetAbout(global::Notes2022.Proto.NoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///	rpc SendEmail(GEmail) returns (NoRequest);							// unauthenticated - slower - use it too much and it really hurts you!
      ///	rpc GetExport(ExportRequest) returns (GNoteHeaderList);				// gets a note header list during an Export
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Notes2022.Proto.AString> GetTextFile(global::Notes2022.Proto.AString request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Notes2022Server</summary>
    public partial class Notes2022ServerClient : grpc::ClientBase<Notes2022ServerClient>
    {
      /// <summary>Creates a new client for Notes2022Server</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public Notes2022ServerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Notes2022Server that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public Notes2022ServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected Notes2022ServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected Notes2022ServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// register a user - create login
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AuthReply Register(global::Notes2022.Proto.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// register a user - create login
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AuthReply Register(global::Notes2022.Proto.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      /// register a user - create login
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AuthReply> RegisterAsync(global::Notes2022.Proto.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// register a user - create login
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AuthReply> RegisterAsync(global::Notes2022.Proto.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>
      /// log a user in
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.LoginReply Login(global::Notes2022.Proto.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// log a user in
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.LoginReply Login(global::Notes2022.Proto.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      /// <summary>
      /// log a user in
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.LoginReply> LoginAsync(global::Notes2022.Proto.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// log a user in
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.LoginReply> LoginAsync(global::Notes2022.Proto.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      /// <summary>
      /// log current user out
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AuthReply Logout(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Logout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// log current user out
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AuthReply Logout(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Logout, null, options, request);
      }
      /// <summary>
      /// log current user out
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AuthReply> LogoutAsync(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// log current user out
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AuthReply> LogoutAsync(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Logout, null, options, request);
      }
      /// <summary>
      /// user confirms email - login enabled now
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AuthReply ConfirmEmail(global::Notes2022.Proto.ConfirmEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfirmEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// user confirms email - login enabled now
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AuthReply ConfirmEmail(global::Notes2022.Proto.ConfirmEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfirmEmail, null, options, request);
      }
      /// <summary>
      /// user confirms email - login enabled now
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AuthReply> ConfirmEmailAsync(global::Notes2022.Proto.ConfirmEmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfirmEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// user confirms email - login enabled now
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AuthReply> ConfirmEmailAsync(global::Notes2022.Proto.ConfirmEmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfirmEmail, null, options, request);
      }
      /// <summary>
      /// gets data for the current user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GAppUser GetUserData(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets data for the current user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GAppUser GetUserData(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserData, null, options, request);
      }
      /// <summary>
      /// gets data for the current user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GAppUser> GetUserDataAsync(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets data for the current user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GAppUser> GetUserDataAsync(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserData, null, options, request);
      }
      /// <summary>
      /// get list of alll app users/logins
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GAppUserList GetUserList(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get list of alll app users/logins
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GAppUserList GetUserList(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserList, null, options, request);
      }
      /// <summary>
      /// get list of alll app users/logins
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GAppUserList> GetUserListAsync(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get list of alll app users/logins
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GAppUserList> GetUserListAsync(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserList, null, options, request);
      }
      /// <summary>
      /// used for editing roles users are in
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.EditUserViewModel GetUserRoles(global::Notes2022.Proto.AppUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// used for editing roles users are in
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.EditUserViewModel GetUserRoles(global::Notes2022.Proto.AppUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserRoles, null, options, request);
      }
      /// <summary>
      /// used for editing roles users are in
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.EditUserViewModel> GetUserRolesAsync(global::Notes2022.Proto.AppUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// used for editing roles users are in
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.EditUserViewModel> GetUserRolesAsync(global::Notes2022.Proto.AppUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserRoles, null, options, request);
      }
      /// <summary>
      /// gets a note header given its id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeader GetHeaderForNoteId(global::Notes2022.Proto.NoteId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHeaderForNoteId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets a note header given its id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeader GetHeaderForNoteId(global::Notes2022.Proto.NoteId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHeaderForNoteId, null, options, request);
      }
      /// <summary>
      /// gets a note header given its id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeader> GetHeaderForNoteIdAsync(global::Notes2022.Proto.NoteId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHeaderForNoteIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets a note header given its id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeader> GetHeaderForNoteIdAsync(global::Notes2022.Proto.NoteId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHeaderForNoteId, null, options, request);
      }
      /// <summary>
      /// gets the content of a note
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.DisplayModel GetNoteContent(global::Notes2022.Proto.DisplayModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteContent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets the content of a note
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.DisplayModel GetNoteContent(global::Notes2022.Proto.DisplayModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNoteContent, null, options, request);
      }
      /// <summary>
      /// gets the content of a note
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.DisplayModel> GetNoteContentAsync(global::Notes2022.Proto.DisplayModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteContentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets the content of a note
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.DisplayModel> GetNoteContentAsync(global::Notes2022.Proto.DisplayModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNoteContent, null, options, request);
      }
      /// <summary>
      /// gets access data and user list
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AccessAndUserList GetAccessAndUserList(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessAndUserList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets access data and user list
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AccessAndUserList GetAccessAndUserList(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccessAndUserList, null, options, request);
      }
      /// <summary>
      /// gets access data and user list
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AccessAndUserList> GetAccessAndUserListAsync(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessAndUserListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets access data and user list
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AccessAndUserList> GetAccessAndUserListAsync(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccessAndUserList, null, options, request);
      }
      /// <summary>
      /// gets the access list for a file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteAccessList GetAccessList(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets the access list for a file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteAccessList GetAccessList(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccessList, null, options, request);
      }
      /// <summary>
      /// gets the access list for a file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteAccessList> GetAccessListAsync(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccessListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets the access list for a file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteAccessList> GetAccessListAsync(global::Notes2022.Proto.AccessAndUserListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccessList, null, options, request);
      }
      /// <summary>
      /// updates roles for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest UpdateUserRoles(global::Notes2022.Proto.EditUserViewModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates roles for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest UpdateUserRoles(global::Notes2022.Proto.EditUserViewModel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUserRoles, null, options, request);
      }
      /// <summary>
      /// updates roles for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> UpdateUserRolesAsync(global::Notes2022.Proto.EditUserViewModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates roles for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> UpdateUserRolesAsync(global::Notes2022.Proto.EditUserViewModel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUserRoles, null, options, request);
      }
      /// <summary>
      /// create a note file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNotefile CreateNoteFile(global::Notes2022.Proto.GNotefile request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNoteFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create a note file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNotefile CreateNoteFile(global::Notes2022.Proto.GNotefile request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNoteFile, null, options, request);
      }
      /// <summary>
      /// create a note file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNotefile> CreateNoteFileAsync(global::Notes2022.Proto.GNotefile request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNoteFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create a note file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNotefile> CreateNoteFileAsync(global::Notes2022.Proto.GNotefile request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNoteFile, null, options, request);
      }
      /// <summary>
      /// updates note file data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNotefile UpdateNoteFile(global::Notes2022.Proto.GNotefile request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNoteFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates note file data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNotefile UpdateNoteFile(global::Notes2022.Proto.GNotefile request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNoteFile, null, options, request);
      }
      /// <summary>
      /// updates note file data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNotefile> UpdateNoteFileAsync(global::Notes2022.Proto.GNotefile request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNoteFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates note file data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNotefile> UpdateNoteFileAsync(global::Notes2022.Proto.GNotefile request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNoteFile, null, options, request);
      }
      /// <summary>
      /// deletes a note file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DeleteNoteFile(global::Notes2022.Proto.GNotefile request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNoteFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// deletes a note file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DeleteNoteFile(global::Notes2022.Proto.GNotefile request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNoteFile, null, options, request);
      }
      /// <summary>
      /// deletes a note file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DeleteNoteFileAsync(global::Notes2022.Proto.GNotefile request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNoteFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// deletes a note file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DeleteNoteFileAsync(global::Notes2022.Proto.GNotefile request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNoteFile, null, options, request);
      }
      /// <summary>
      /// runs an import
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest Import(global::Notes2022.Proto.ImportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Import(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// runs an import
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest Import(global::Notes2022.Proto.ImportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Import, null, options, request);
      }
      /// <summary>
      /// runs an import
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> ImportAsync(global::Notes2022.Proto.ImportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// runs an import
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> ImportAsync(global::Notes2022.Proto.ImportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Import, null, options, request);
      }
      /// <summary>
      /// get a single access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteAccess UpdateAccessItem(global::Notes2022.Proto.GNoteAccess request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get a single access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteAccess UpdateAccessItem(global::Notes2022.Proto.GNoteAccess request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccessItem, null, options, request);
      }
      /// <summary>
      /// get a single access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteAccess> UpdateAccessItemAsync(global::Notes2022.Proto.GNoteAccess request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccessItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get a single access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteAccess> UpdateAccessItemAsync(global::Notes2022.Proto.GNoteAccess request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccessItem, null, options, request);
      }
      /// <summary>
      /// deletes an access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DeleteAccessItem(global::Notes2022.Proto.GNoteAccess request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// deletes an access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DeleteAccessItem(global::Notes2022.Proto.GNoteAccess request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccessItem, null, options, request);
      }
      /// <summary>
      /// deletes an access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DeleteAccessItemAsync(global::Notes2022.Proto.GNoteAccess request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccessItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// deletes an access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DeleteAccessItemAsync(global::Notes2022.Proto.GNoteAccess request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccessItem, null, options, request);
      }
      /// <summary>
      /// adds an access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteAccess AddAccessItem(global::Notes2022.Proto.GNoteAccess request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccessItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// adds an access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteAccess AddAccessItem(global::Notes2022.Proto.GNoteAccess request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAccessItem, null, options, request);
      }
      /// <summary>
      /// adds an access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteAccess> AddAccessItemAsync(global::Notes2022.Proto.GNoteAccess request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccessItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// adds an access item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteAccess> AddAccessItemAsync(global::Notes2022.Proto.GNoteAccess request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAccessItem, null, options, request);
      }
      /// <summary>
      /// updates user data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GAppUser UpdateUserData(global::Notes2022.Proto.GAppUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates user data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GAppUser UpdateUserData(global::Notes2022.Proto.GAppUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUserData, null, options, request);
      }
      /// <summary>
      /// updates user data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GAppUser> UpdateUserDataAsync(global::Notes2022.Proto.GAppUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates user data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GAppUser> UpdateUserDataAsync(global::Notes2022.Proto.GAppUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUserData, null, options, request);
      }
      /// <summary>
      /// gets the non-zero version headers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeaderList GetVersions(global::Notes2022.Proto.GetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets the non-zero version headers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeaderList GetVersions(global::Notes2022.Proto.GetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVersions, null, options, request);
      }
      /// <summary>
      /// gets the non-zero version headers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeaderList> GetVersionsAsync(global::Notes2022.Proto.GetVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets the non-zero version headers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeaderList> GetVersionsAsync(global::Notes2022.Proto.GetVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVersions, null, options, request);
      }
      /// <summary>
      /// gets the sequencer list for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GSequencerList GetSequencer(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSequencer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets the sequencer list for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GSequencerList GetSequencer(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSequencer, null, options, request);
      }
      /// <summary>
      /// gets the sequencer list for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GSequencerList> GetSequencerAsync(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSequencerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets the sequencer list for a user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GSequencerList> GetSequencerAsync(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSequencer, null, options, request);
      }
      /// <summary>
      /// creates a sequencer item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest CreateSequencer(global::Notes2022.Proto.SCheckModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSequencer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// creates a sequencer item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest CreateSequencer(global::Notes2022.Proto.SCheckModel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSequencer, null, options, request);
      }
      /// <summary>
      /// creates a sequencer item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> CreateSequencerAsync(global::Notes2022.Proto.SCheckModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSequencerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// creates a sequencer item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> CreateSequencerAsync(global::Notes2022.Proto.SCheckModel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSequencer, null, options, request);
      }
      /// <summary>
      /// deletes a sequencer item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DeleteSequencer(global::Notes2022.Proto.SCheckModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSequencer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// deletes a sequencer item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DeleteSequencer(global::Notes2022.Proto.SCheckModel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSequencer, null, options, request);
      }
      /// <summary>
      /// deletes a sequencer item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DeleteSequencerAsync(global::Notes2022.Proto.SCheckModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSequencerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// deletes a sequencer item
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DeleteSequencerAsync(global::Notes2022.Proto.SCheckModel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSequencer, null, options, request);
      }
      /// <summary>
      /// updates a sequencer item - while sequencing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest UpdateSequencer(global::Notes2022.Proto.GSequencer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSequencer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates a sequencer item - while sequencing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest UpdateSequencer(global::Notes2022.Proto.GSequencer request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSequencer, null, options, request);
      }
      /// <summary>
      /// updates a sequencer item - while sequencing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> UpdateSequencerAsync(global::Notes2022.Proto.GSequencer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSequencerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates a sequencer item - while sequencing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> UpdateSequencerAsync(global::Notes2022.Proto.GSequencer request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSequencer, null, options, request);
      }
      /// <summary>
      /// updates a sequencer item ordinal
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest UpdateSequencerOrdinal(global::Notes2022.Proto.GSequencer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSequencerOrdinal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates a sequencer item ordinal
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest UpdateSequencerOrdinal(global::Notes2022.Proto.GSequencer request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSequencerOrdinal, null, options, request);
      }
      /// <summary>
      /// updates a sequencer item ordinal
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> UpdateSequencerOrdinalAsync(global::Notes2022.Proto.GSequencer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSequencerOrdinalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates a sequencer item ordinal
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> UpdateSequencerOrdinalAsync(global::Notes2022.Proto.GSequencer request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSequencerOrdinal, null, options, request);
      }
      /// <summary>
      /// get the notefile for the note index
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNotefile GetNoteFile(global::Notes2022.Proto.NoteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get the notefile for the note index
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNotefile GetNoteFile(global::Notes2022.Proto.NoteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNoteFile, null, options, request);
      }
      /// <summary>
      /// get the notefile for the note index
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNotefile> GetNoteFileAsync(global::Notes2022.Proto.NoteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get the notefile for the note index
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNotefile> GetNoteFileAsync(global::Notes2022.Proto.NoteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNoteFile, null, options, request);
      }
      /// <summary>
      /// get a note header
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeader CreateNewNote(global::Notes2022.Proto.TextViewModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNewNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get a note header
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeader CreateNewNote(global::Notes2022.Proto.TextViewModel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNewNote, null, options, request);
      }
      /// <summary>
      /// get a note header
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeader> CreateNewNoteAsync(global::Notes2022.Proto.TextViewModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNewNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get a note header
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeader> CreateNewNoteAsync(global::Notes2022.Proto.TextViewModel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNewNote, null, options, request);
      }
      /// <summary>
      /// updates a note header
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeader UpdateNote(global::Notes2022.Proto.TextViewModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates a note header
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeader UpdateNote(global::Notes2022.Proto.TextViewModel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// updates a note header
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeader> UpdateNoteAsync(global::Notes2022.Proto.TextViewModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// updates a note header
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeader> UpdateNoteAsync(global::Notes2022.Proto.TextViewModel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// authenticated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest SendEmailAuth(global::Notes2022.Proto.GEmail request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendEmailAuth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// authenticated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest SendEmailAuth(global::Notes2022.Proto.GEmail request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendEmailAuth, null, options, request);
      }
      /// <summary>
      /// authenticated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> SendEmailAuthAsync(global::Notes2022.Proto.GEmail request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendEmailAuthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// authenticated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> SendEmailAuthAsync(global::Notes2022.Proto.GEmail request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendEmailAuth, null, options, request);
      }
      /// <summary>
      /// gets note content during an export
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteContent GetExport2(global::Notes2022.Proto.NoteId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExport2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets note content during an export
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteContent GetExport2(global::Notes2022.Proto.NoteId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExport2, null, options, request);
      }
      /// <summary>
      /// gets note content during an export
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteContent> GetExport2Async(global::Notes2022.Proto.NoteId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExport2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets note content during an export
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteContent> GetExport2Async(global::Notes2022.Proto.NoteId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExport2, null, options, request);
      }
      /// <summary>
      /// forwards note(s) via email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DoForward(global::Notes2022.Proto.ForwardViewModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoForward(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// forwards note(s) via email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DoForward(global::Notes2022.Proto.ForwardViewModel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoForward, null, options, request);
      }
      /// <summary>
      /// forwards note(s) via email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DoForwardAsync(global::Notes2022.Proto.ForwardViewModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoForwardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// forwards note(s) via email
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DoForwardAsync(global::Notes2022.Proto.ForwardViewModel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoForward, null, options, request);
      }
      /// <summary>
      /// get list of the note files ordered by name
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNotefileList GetNoteFilesOrderedByName(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteFilesOrderedByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get list of the note files ordered by name
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNotefileList GetNoteFilesOrderedByName(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNoteFilesOrderedByName, null, options, request);
      }
      /// <summary>
      /// get list of the note files ordered by name
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNotefileList> GetNoteFilesOrderedByNameAsync(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteFilesOrderedByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get list of the note files ordered by name
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNotefileList> GetNoteFilesOrderedByNameAsync(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNoteFilesOrderedByName, null, options, request);
      }
      /// <summary>
      /// copies note(s) to another file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest CopyNote(global::Notes2022.Proto.CopyModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// copies note(s) to another file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest CopyNote(global::Notes2022.Proto.CopyModel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyNote, null, options, request);
      }
      /// <summary>
      /// copies note(s) to another file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> CopyNoteAsync(global::Notes2022.Proto.CopyModel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// copies note(s) to another file
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> CopyNoteAsync(global::Notes2022.Proto.CopyModel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyNote, null, options, request);
      }
      /// <summary>
      /// deletes a note
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DeleteNote(global::Notes2022.Proto.NoteId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// deletes a note
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoRequest DeleteNote(global::Notes2022.Proto.NoteId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// deletes a note
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DeleteNoteAsync(global::Notes2022.Proto.NoteId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// deletes a note
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoRequest> DeleteNoteAsync(global::Notes2022.Proto.NoteId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// returns data for a json export see GetNoteHeaders for a more flexible way to get filtered data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.JsonExport GetExportJson(global::Notes2022.Proto.ExportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExportJson(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// returns data for a json export see GetNoteHeaders for a more flexible way to get filtered data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.JsonExport GetExportJson(global::Notes2022.Proto.ExportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExportJson, null, options, request);
      }
      /// <summary>
      /// returns data for a json export see GetNoteHeaders for a more flexible way to get filtered data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.JsonExport> GetExportJsonAsync(global::Notes2022.Proto.ExportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExportJsonAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// returns data for a json export see GetNoteHeaders for a more flexible way to get filtered data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.JsonExport> GetExportJsonAsync(global::Notes2022.Proto.ExportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExportJson, null, options, request);
      }
      /// <summary>
      /// request all or some slice of a note file - headers w or wo content and tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeaderList GetNoteHeaders(global::Notes2022.Proto.NoteHeadersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteHeaders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// request all or some slice of a note file - headers w or wo content and tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.GNoteHeaderList GetNoteHeaders(global::Notes2022.Proto.NoteHeadersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNoteHeaders, null, options, request);
      }
      /// <summary>
      /// request all or some slice of a note file - headers w or wo content and tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeaderList> GetNoteHeadersAsync(global::Notes2022.Proto.NoteHeadersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteHeadersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// request all or some slice of a note file - headers w or wo content and tags
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.GNoteHeaderList> GetNoteHeadersAsync(global::Notes2022.Proto.NoteHeadersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNoteHeaders, null, options, request);
      }
      /// <summary>
      /// Gets the current homepage message if any
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AString GetHomePageMessage(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHomePageMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the current homepage message if any
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AString GetHomePageMessage(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHomePageMessage, null, options, request);
      }
      /// <summary>
      /// Gets the current homepage message if any
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AString> GetHomePageMessageAsync(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHomePageMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the current homepage message if any
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AString> GetHomePageMessageAsync(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHomePageMessage, null, options, request);
      }
      /// <summary>
      /// Gets the number of base notes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoteCount GetNoteCount(global::Notes2022.Proto.NoteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the number of base notes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoteCount GetNoteCount(global::Notes2022.Proto.NoteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNoteCount, null, options, request);
      }
      /// <summary>
      /// Gets the number of base notes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoteCount> GetNoteCountAsync(global::Notes2022.Proto.NoteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the number of base notes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoteCount> GetNoteCountAsync(global::Notes2022.Proto.NoteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNoteCount, null, options, request);
      }
      /// <summary>
      /// get data needed for home page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.HomePageModel GetHomePageModel(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHomePageModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get data needed for home page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.HomePageModel GetHomePageModel(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHomePageModel, null, options, request);
      }
      /// <summary>
      /// get data needed for home page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.HomePageModel> GetHomePageModelAsync(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHomePageModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get data needed for home page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.HomePageModel> GetHomePageModelAsync(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHomePageModel, null, options, request);
      }
      /// <summary>
      /// a bit more data than home page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.HomePageModel GetAdminPageModel(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAdminPageModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// a bit more data than home page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.HomePageModel GetAdminPageModel(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAdminPageModel, null, options, request);
      }
      /// <summary>
      /// a bit more data than home page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.HomePageModel> GetAdminPageModelAsync(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAdminPageModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// a bit more data than home page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.HomePageModel> GetAdminPageModelAsync(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAdminPageModel, null, options, request);
      }
      /// <summary>
      /// get data for the index of a notefile
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoteDisplayIndexModel GetNoteFileIndexData(global::Notes2022.Proto.NoteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteFileIndexData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get data for the index of a notefile
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.NoteDisplayIndexModel GetNoteFileIndexData(global::Notes2022.Proto.NoteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNoteFileIndexData, null, options, request);
      }
      /// <summary>
      /// get data for the index of a notefile
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoteDisplayIndexModel> GetNoteFileIndexDataAsync(global::Notes2022.Proto.NoteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteFileIndexDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get data for the index of a notefile
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.NoteDisplayIndexModel> GetNoteFileIndexDataAsync(global::Notes2022.Proto.NoteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNoteFileIndexData, null, options, request);
      }
      /// <summary>
      /// gets data for the about page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AboutModel GetAbout(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAbout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets data for the about page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AboutModel GetAbout(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAbout, null, options, request);
      }
      /// <summary>
      /// gets data for the about page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AboutModel> GetAboutAsync(global::Notes2022.Proto.NoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAboutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// gets data for the about page
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AboutModel> GetAboutAsync(global::Notes2022.Proto.NoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAbout, null, options, request);
      }
      /// <summary>
      ///	rpc SendEmail(GEmail) returns (NoRequest);							// unauthenticated - slower - use it too much and it really hurts you!
      ///	rpc GetExport(ExportRequest) returns (GNoteHeaderList);				// gets a note header list during an Export
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AString GetTextFile(global::Notes2022.Proto.AString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTextFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///	rpc SendEmail(GEmail) returns (NoRequest);							// unauthenticated - slower - use it too much and it really hurts you!
      ///	rpc GetExport(ExportRequest) returns (GNoteHeaderList);				// gets a note header list during an Export
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Notes2022.Proto.AString GetTextFile(global::Notes2022.Proto.AString request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTextFile, null, options, request);
      }
      /// <summary>
      ///	rpc SendEmail(GEmail) returns (NoRequest);							// unauthenticated - slower - use it too much and it really hurts you!
      ///	rpc GetExport(ExportRequest) returns (GNoteHeaderList);				// gets a note header list during an Export
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AString> GetTextFileAsync(global::Notes2022.Proto.AString request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTextFileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///	rpc SendEmail(GEmail) returns (NoRequest);							// unauthenticated - slower - use it too much and it really hurts you!
      ///	rpc GetExport(ExportRequest) returns (GNoteHeaderList);				// gets a note header list during an Export
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Notes2022.Proto.AString> GetTextFileAsync(global::Notes2022.Proto.AString request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTextFile, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override Notes2022ServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new Notes2022ServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(Notes2022ServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Register, serviceImpl.Register)
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_Logout, serviceImpl.Logout)
          .AddMethod(__Method_ConfirmEmail, serviceImpl.ConfirmEmail)
          .AddMethod(__Method_GetUserData, serviceImpl.GetUserData)
          .AddMethod(__Method_GetUserList, serviceImpl.GetUserList)
          .AddMethod(__Method_GetUserRoles, serviceImpl.GetUserRoles)
          .AddMethod(__Method_GetHeaderForNoteId, serviceImpl.GetHeaderForNoteId)
          .AddMethod(__Method_GetNoteContent, serviceImpl.GetNoteContent)
          .AddMethod(__Method_GetAccessAndUserList, serviceImpl.GetAccessAndUserList)
          .AddMethod(__Method_GetAccessList, serviceImpl.GetAccessList)
          .AddMethod(__Method_UpdateUserRoles, serviceImpl.UpdateUserRoles)
          .AddMethod(__Method_CreateNoteFile, serviceImpl.CreateNoteFile)
          .AddMethod(__Method_UpdateNoteFile, serviceImpl.UpdateNoteFile)
          .AddMethod(__Method_DeleteNoteFile, serviceImpl.DeleteNoteFile)
          .AddMethod(__Method_Import, serviceImpl.Import)
          .AddMethod(__Method_UpdateAccessItem, serviceImpl.UpdateAccessItem)
          .AddMethod(__Method_DeleteAccessItem, serviceImpl.DeleteAccessItem)
          .AddMethod(__Method_AddAccessItem, serviceImpl.AddAccessItem)
          .AddMethod(__Method_UpdateUserData, serviceImpl.UpdateUserData)
          .AddMethod(__Method_GetVersions, serviceImpl.GetVersions)
          .AddMethod(__Method_GetSequencer, serviceImpl.GetSequencer)
          .AddMethod(__Method_CreateSequencer, serviceImpl.CreateSequencer)
          .AddMethod(__Method_DeleteSequencer, serviceImpl.DeleteSequencer)
          .AddMethod(__Method_UpdateSequencer, serviceImpl.UpdateSequencer)
          .AddMethod(__Method_UpdateSequencerOrdinal, serviceImpl.UpdateSequencerOrdinal)
          .AddMethod(__Method_GetNoteFile, serviceImpl.GetNoteFile)
          .AddMethod(__Method_CreateNewNote, serviceImpl.CreateNewNote)
          .AddMethod(__Method_UpdateNote, serviceImpl.UpdateNote)
          .AddMethod(__Method_SendEmailAuth, serviceImpl.SendEmailAuth)
          .AddMethod(__Method_GetExport2, serviceImpl.GetExport2)
          .AddMethod(__Method_DoForward, serviceImpl.DoForward)
          .AddMethod(__Method_GetNoteFilesOrderedByName, serviceImpl.GetNoteFilesOrderedByName)
          .AddMethod(__Method_CopyNote, serviceImpl.CopyNote)
          .AddMethod(__Method_DeleteNote, serviceImpl.DeleteNote)
          .AddMethod(__Method_GetExportJson, serviceImpl.GetExportJson)
          .AddMethod(__Method_GetNoteHeaders, serviceImpl.GetNoteHeaders)
          .AddMethod(__Method_GetHomePageMessage, serviceImpl.GetHomePageMessage)
          .AddMethod(__Method_GetNoteCount, serviceImpl.GetNoteCount)
          .AddMethod(__Method_GetHomePageModel, serviceImpl.GetHomePageModel)
          .AddMethod(__Method_GetAdminPageModel, serviceImpl.GetAdminPageModel)
          .AddMethod(__Method_GetNoteFileIndexData, serviceImpl.GetNoteFileIndexData)
          .AddMethod(__Method_GetAbout, serviceImpl.GetAbout)
          .AddMethod(__Method_GetTextFile, serviceImpl.GetTextFile).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, Notes2022ServerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.RegisterRequest, global::Notes2022.Proto.AuthReply>(serviceImpl.Register));
      serviceBinder.AddMethod(__Method_Login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.LoginRequest, global::Notes2022.Proto.LoginReply>(serviceImpl.Login));
      serviceBinder.AddMethod(__Method_Logout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.AuthReply>(serviceImpl.Logout));
      serviceBinder.AddMethod(__Method_ConfirmEmail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.ConfirmEmailRequest, global::Notes2022.Proto.AuthReply>(serviceImpl.ConfirmEmail));
      serviceBinder.AddMethod(__Method_GetUserData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GAppUser>(serviceImpl.GetUserData));
      serviceBinder.AddMethod(__Method_GetUserList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GAppUserList>(serviceImpl.GetUserList));
      serviceBinder.AddMethod(__Method_GetUserRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.AppUserRequest, global::Notes2022.Proto.EditUserViewModel>(serviceImpl.GetUserRoles));
      serviceBinder.AddMethod(__Method_GetHeaderForNoteId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoteId, global::Notes2022.Proto.GNoteHeader>(serviceImpl.GetHeaderForNoteId));
      serviceBinder.AddMethod(__Method_GetNoteContent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.DisplayModelRequest, global::Notes2022.Proto.DisplayModel>(serviceImpl.GetNoteContent));
      serviceBinder.AddMethod(__Method_GetAccessAndUserList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.AccessAndUserListRequest, global::Notes2022.Proto.AccessAndUserList>(serviceImpl.GetAccessAndUserList));
      serviceBinder.AddMethod(__Method_GetAccessList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.AccessAndUserListRequest, global::Notes2022.Proto.GNoteAccessList>(serviceImpl.GetAccessList));
      serviceBinder.AddMethod(__Method_UpdateUserRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.EditUserViewModel, global::Notes2022.Proto.NoRequest>(serviceImpl.UpdateUserRoles));
      serviceBinder.AddMethod(__Method_CreateNoteFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GNotefile, global::Notes2022.Proto.GNotefile>(serviceImpl.CreateNoteFile));
      serviceBinder.AddMethod(__Method_UpdateNoteFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GNotefile, global::Notes2022.Proto.GNotefile>(serviceImpl.UpdateNoteFile));
      serviceBinder.AddMethod(__Method_DeleteNoteFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GNotefile, global::Notes2022.Proto.NoRequest>(serviceImpl.DeleteNoteFile));
      serviceBinder.AddMethod(__Method_Import, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.ImportRequest, global::Notes2022.Proto.NoRequest>(serviceImpl.Import));
      serviceBinder.AddMethod(__Method_UpdateAccessItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GNoteAccess, global::Notes2022.Proto.GNoteAccess>(serviceImpl.UpdateAccessItem));
      serviceBinder.AddMethod(__Method_DeleteAccessItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GNoteAccess, global::Notes2022.Proto.NoRequest>(serviceImpl.DeleteAccessItem));
      serviceBinder.AddMethod(__Method_AddAccessItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GNoteAccess, global::Notes2022.Proto.GNoteAccess>(serviceImpl.AddAccessItem));
      serviceBinder.AddMethod(__Method_UpdateUserData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GAppUser, global::Notes2022.Proto.GAppUser>(serviceImpl.UpdateUserData));
      serviceBinder.AddMethod(__Method_GetVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GetVersionsRequest, global::Notes2022.Proto.GNoteHeaderList>(serviceImpl.GetVersions));
      serviceBinder.AddMethod(__Method_GetSequencer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GSequencerList>(serviceImpl.GetSequencer));
      serviceBinder.AddMethod(__Method_CreateSequencer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.SCheckModel, global::Notes2022.Proto.NoRequest>(serviceImpl.CreateSequencer));
      serviceBinder.AddMethod(__Method_DeleteSequencer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.SCheckModel, global::Notes2022.Proto.NoRequest>(serviceImpl.DeleteSequencer));
      serviceBinder.AddMethod(__Method_UpdateSequencer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GSequencer, global::Notes2022.Proto.NoRequest>(serviceImpl.UpdateSequencer));
      serviceBinder.AddMethod(__Method_UpdateSequencerOrdinal, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GSequencer, global::Notes2022.Proto.NoRequest>(serviceImpl.UpdateSequencerOrdinal));
      serviceBinder.AddMethod(__Method_GetNoteFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoteIndexRequest, global::Notes2022.Proto.GNotefile>(serviceImpl.GetNoteFile));
      serviceBinder.AddMethod(__Method_CreateNewNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.TextViewModel, global::Notes2022.Proto.GNoteHeader>(serviceImpl.CreateNewNote));
      serviceBinder.AddMethod(__Method_UpdateNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.TextViewModel, global::Notes2022.Proto.GNoteHeader>(serviceImpl.UpdateNote));
      serviceBinder.AddMethod(__Method_SendEmailAuth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.GEmail, global::Notes2022.Proto.NoRequest>(serviceImpl.SendEmailAuth));
      serviceBinder.AddMethod(__Method_GetExport2, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoteId, global::Notes2022.Proto.GNoteContent>(serviceImpl.GetExport2));
      serviceBinder.AddMethod(__Method_DoForward, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.ForwardViewModel, global::Notes2022.Proto.NoRequest>(serviceImpl.DoForward));
      serviceBinder.AddMethod(__Method_GetNoteFilesOrderedByName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.GNotefileList>(serviceImpl.GetNoteFilesOrderedByName));
      serviceBinder.AddMethod(__Method_CopyNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.CopyModel, global::Notes2022.Proto.NoRequest>(serviceImpl.CopyNote));
      serviceBinder.AddMethod(__Method_DeleteNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoteId, global::Notes2022.Proto.NoRequest>(serviceImpl.DeleteNote));
      serviceBinder.AddMethod(__Method_GetExportJson, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.ExportRequest, global::Notes2022.Proto.JsonExport>(serviceImpl.GetExportJson));
      serviceBinder.AddMethod(__Method_GetNoteHeaders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoteHeadersRequest, global::Notes2022.Proto.GNoteHeaderList>(serviceImpl.GetNoteHeaders));
      serviceBinder.AddMethod(__Method_GetHomePageMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.AString>(serviceImpl.GetHomePageMessage));
      serviceBinder.AddMethod(__Method_GetNoteCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoteIndexRequest, global::Notes2022.Proto.NoteCount>(serviceImpl.GetNoteCount));
      serviceBinder.AddMethod(__Method_GetHomePageModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.HomePageModel>(serviceImpl.GetHomePageModel));
      serviceBinder.AddMethod(__Method_GetAdminPageModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.HomePageModel>(serviceImpl.GetAdminPageModel));
      serviceBinder.AddMethod(__Method_GetNoteFileIndexData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoteIndexRequest, global::Notes2022.Proto.NoteDisplayIndexModel>(serviceImpl.GetNoteFileIndexData));
      serviceBinder.AddMethod(__Method_GetAbout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.NoRequest, global::Notes2022.Proto.AboutModel>(serviceImpl.GetAbout));
      serviceBinder.AddMethod(__Method_GetTextFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Notes2022.Proto.AString, global::Notes2022.Proto.AString>(serviceImpl.GetTextFile));
    }

  }
}
#endregion
